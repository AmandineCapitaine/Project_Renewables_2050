# Imports 
import pyomo.environ as pyo
from pyomo.opt import SolverFactory
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import csv
import os

class complete_model() : 
    
        
    
    def __init__(self) : 
          
        
        
        # Months 
        self.m = ["jan","feb", "mar","apr","jun","jul","aug","sep","oct","nov","dec"]
        # Technologies 
        #self.tec = list(self.Q_tec.index)
        self.tec = ["offshore","onshore","pv","river","lake","biogas","phs","battery","methanation"]
        # Storage technologies
        self.stor = ["phs","battery","methanation"]
        # Power plants
        self.gen = ["offshore","onshore","pv","river","lake","biogas"]
        # Variable tec
        self.vre = ["offshore","onshore","pv"]
        
        # Technologies for upward FRR 
        self.frr = ["phs","battery","lake"]
        
        
        # Initialisation du modèle Pyomo 
        self.model = pyo.ConcreteModel()
        
        
        
    def load_param(self, path, name_load_factor, name_load_demand, name_gene_river =  "run_of_river.csv") : 
        
        print("Chargement des paramètres ...")
        
        # profil des VRE par heure (éolien + PV)
        self.load_factor = pd.read_csv(path + name_load_factor, index_col=[0, 1], squeeze=True, header=None)
        print(name_load_factor)
        
        # Additional FRR requirement for variable renewable energies because of forecast errors
        self.epsilon = pd.read_csv(path+"reserve_requirements.csv", index_col=0, squeeze=True, header=None)
        
        # Demand profile in each our in GW        
        self.demand_2050 = pd.read_csv(path + name_load_demand, index_col = 0, squeeze=True, header=None)
        print(name_load_demand)
        
        # Variable operation and maintenance costs in M€/GWh
        self.vOM = pd.read_csv(path + "vO&M.csv", index_col=0, squeeze=True, header=None)
        # Monthly lake inflows in GWh
        self.lake_inflows = pd.read_csv(path + "lake_inflows.csv", index_col=0, squeeze=True, header=None)
        
        # profil des rivières par heure
        self.gene_river = pd.read_csv(path +name_gene_river, header = None , index_col = 0, squeeze = True)
        
        # max Q
        self.max_capa = pd.read_csv(path+"max_capas.csv", header = None , index_col = 0, squeeze = True)
        
        # Annualized power capex cost in M€/GW/year
        self.capex = pd.read_csv(path + "annuities.csv", index_col=0, squeeze=True, header=None)
        
        # Existing capacities of the technologies by December 2017 in GW
        self.capa_ex = pd.read_csv(path+"existing_capas.csv", index_col=0, squeeze=True, header=None)
        
        # Annualized energy capex cost of storage technologies in M€/GWh/year
        self.capex_en = pd.read_csv(path + "str_annuities.csv", index_col=0, squeeze=True, header=None)
        
        # Annualized fixed operation and maintenance costs M€/GW/year
        self.fOM = pd.read_csv(path+"fO&M.csv", index_col=0, squeeze=True, header=None)
        s_capex = [0,0,84.16086]
        self.s_capex = pd.Series(s_capex, index = self.stor)
        
        # charging related fOM of storage in M€/GW/year
        s_opex = [0,0,59.25]
        self.s_opex = pd.Series(s_opex, index = self.stor)

        # maxium energy can be generated by biogas in TWh
        self.max_biogas = 15
        
        # uncertainty coefficient for hourly demand
        self.load_uncertainty = 0.01
        
        # load variation factor
        self.delta = 0.1
        
        # charging efifciency of storage technologies
        eta_in = [0.95,0.9,0.59]
        self.eta_in = pd.Series(eta_in, index = self.stor)
        
        # discharging efficiency of storage technolgoies
        eta_out = [0.9, 0.95, 0.45]
        self.eta_out = pd.Series(eta_out, index = self.stor)


        self.epsilon = self.epsilon.rename(index ={"PV": "pv"})
        self.vOM = self.vOM.rename(index={"Onshore": "onshore", "PV":"pv", "PHS":"phs", "Battery":"battery"})
        self.fOM = self.fOM.rename(index={"Offshore": "offshore", "Onshore": "onshore", "PV":"pv", "PHS":"phs", "Battery":"battery"})
        self.capex = self.capex.rename(index={"Offshore": "offshore", "Onshore": "onshore", "PV":"pv", "PHS":"phs", "Battery":"battery"})
        
        

        
    def init_set(self):
        
        print("Initialisation des sets...")
        self.first_hour = 0
        self.last_hour = len(self.demand_2050)
        days_in_feb = 672

        hours_by_months = {1: 744, 2: days_in_feb, 3: 744, 4: 720, 5: 744, 6: 720, 7: 744, 8: 744, 9: 720, 10: 744, 11: 720, 12: 744}
        self.months_hours = {1: range(0, 744), 2: range(744, 1440), 3: range(1440, 2184), 4: range(2184, 2904),
                        5: range(2904, 3648), 6: range(3648, 4368), 7: range(4368, 5112),
                        8: range(5112, 5856), 9: range(5856, 6576), 10: range(6576, 7320), 11: range(7320, 8040),
                        12: range(8039, self.last_hour)}
        
        self.months_hours = dict(zip(self.m,list(self.months_hours.values()))) 

        #Range of hour in one year
        self.model.h = pyo.RangeSet(self.first_hour,self.last_hour-1)
        #Months
        self.model.months = pyo.Set(initialize = self.m)
        #Technologies
        self.model.tec = pyo.Set(initialize=self.tec)
        #Power plants
        self.model.gen = pyo.Set(initialize=self.gen)
        #Variables Technologies
        self.model.vre = pyo.Set(initialize=self.vre)
        #Storage Technologies
        self.model.str = pyo.Set(initialize=self.stor)
        #Technologies for upward FRR
        self.model.frr =pyo.Set(initialize=self.frr)
        
        
    def capa_bounds(self, model,i):
        if i in self.max_capa.keys():
            return (None,self.max_capa[i])
        else :
            return(None,None)

    def s_bounds(self, model,i):
        if i == 'phs' :
            return (4.2,6.2)
        else :
            return (None,None)

    def capacity_bounds(self, model,i):
        if i == 'phs' :
            return (80.16,135.5)
        else :
            return (None,None)
        
    def init_variable(self):
        # Définitions des variables à optimiser
        print("Définition des variables à optimiser ...")
        # Hourly energy generation in GWh/h
        self.model.gene = pyo.Var(((tec, h) for tec in self.model.tec for h in self.model.h), within=pyo.NonNegativeReals,initialize=0)

        # Hourly electricity input of battery storage GW
        self.model.storage = pyo.Var(((storage, h) for storage in self.model.str for h in self.model.h), within=pyo.NonNegativeReals,initialize=0)

        # Energy stored in each storage technology in GWh = Stage of charge
        self.model.stored = pyo.Var(((storage, h) for storage in self.model.str for h in self.model.h), within=pyo.NonNegativeReals,initialize=10)

        # Required upward frequency restoration reserve in GW    
        self.model.reserve = pyo.Var(((reserve, h) for reserve in self.model.frr for h in self.model.h), within=pyo.NonNegativeReals,initialize=0)
        
        # Q installed capacity
        self.model.Q = pyo.Var(self.model.tec, within = pyo.NonNegativeReals,initialize=0, bounds = self.capa_bounds)
        self.model.Q["river"].fix(7.5)
        self.model.Q["lake"].fix(12.855)
        
        # S charging capacity
        self.model.S = pyo.Var(self.model.str, within = pyo.NonNegativeReals,initialize=0, bounds = self.s_bounds)
        
        # VOLUME energy capacity
        self.model.volume = pyo.Var(self.model.str, within = pyo.NonNegativeReals,initialize=0, bounds = self.capacity_bounds)
        
        
    # définition des contraintes : 
    
    
    def generation_vre_constraint_rule(self, model, h, vre): #ok
        """Get constraint on variables renewable profiles generation."""
        return model.gene[vre, h] == model.Q[vre] * self.load_factor[vre,h]

    def generation_river_rule(self, model, h):
        return model.gene["river", h] == model.Q["river"]*self.gene_river[h]
    
    def generation_capacity_constraint_rule(self, model, h, tec): #ok
        """Get constraint on maximum power for non-VRE technologies."""
        return model.Q[tec] >= model.gene[tec,h]
    
    def battery_constraint_rule(self, model): #ok
        return model.S["battery"] == model.Q["battery"]

    def biogas_constraint_rule(self, model): #ok
        """Get constraint on biogas."""
        gene_biogas = sum(model.gene['biogas', hour] for hour in model.h)
        return gene_biogas <= self.max_biogas * 1000

    def frr_capacity_constraint_rule(self, model, h, frr): #ok
        """Get constraint on maximum generation including reserves"""
        return model.Q[frr] >= model.gene[frr, h] + model.reserve[frr, h]

    def reserves_constraint_rule(self, model, h): #ok
        """Get constraint on water for lake reservoirs."""
        res_req = sum(self.epsilon[vre] * model.Q[vre] for vre in model.vre)
        load_req = self.demand_2050[h] *self.load_uncertainty * (1 + self.delta)
        return sum(model.reserve[frr, h] for frr in model.frr) ==  res_req + load_req
    
    def storing_constraint_rule(self, model, h, storage_tecs): #ok
        """Get constraint on storing."""
        hPOne = h+1 if h<(self.last_hour-1) else 0
        charge = model.storage[storage_tecs, h] * self.eta_in[storage_tecs]
        discharge =  model.gene[storage_tecs, h] / self.eta_out[storage_tecs]
        flux = charge - discharge
        return model.stored[storage_tecs, hPOne] == model.stored[storage_tecs, h] + flux

    def storage_constraint_rule(self, model,storage_tecs): #ok
        """Get constraint on stored energy to be equal at the end than at the start."""
        first = model.stored[storage_tecs, self.first_hour]
        last = model.stored[storage_tecs, self.last_hour-1]
        charge = model.storage[storage_tecs, self.last_hour-1] * self.eta_in[storage_tecs]
        discharge = model.gene[storage_tecs, self.last_hour-1] / self.eta_out[storage_tecs]
        flux = charge - discharge
        return first == last + flux
    
    def stored_capacity_constraint(self, model, h, storage_tecs): #ok
        """Get constraint on maximum energy that is stored in storage units"""
        return model.stored[storage_tecs,h] <= model.volume[storage_tecs]

    def stored_capacity_constraint2(self, model, h, storage_tecs): #ok
        """Get constraint on maximum energy that is stored in storage units"""
        return model.storage[storage_tecs, h] <= model.S[storage_tecs]
    
    def lake_reserve_constraint_rule(self, model, month): #ok
        """Get constraint on maximum monthly lake generation."""
        return sum(model.gene['lake', hour] for hour in self.months_hours[month]) <= self.lake_inflows[month] * 1000

    

    
    def adequacy_constraint_rule(self, model, h):
        """Get constraint for 'supply/demand relation'"""
        sto = sum(model.storage[stor, h] for stor in model.str)
        return sum(model.gene[tec, h] for tec in model.tec) >= (self.demand_2050[h] + sto )

    def objective_rule(self, model):
        """Get constraint for the final objective function."""
        return (sum((model.Q[tec] - self.capa_ex[tec]) * self.capex[tec] for tec in self.model.tec) \
           + sum(model.volume[storage_tecs] * self.capex_en[storage_tecs] for storage_tecs in self.model.str)\
           + sum(model.Q[tec] * self.fOM[tec] for tec in self.model.tec)\
           + sum(model.S[storage_tecs] * (self.s_opex[storage_tecs] + self.s_capex[storage_tecs]) for storage_tecs in self.model.str)\
           + sum(sum(model.gene[tec, h] * self.vOM[tec] for h in self.model.h) for tec in self.model.tec))/1000

    
    def add_constraints(self):
        
        print("Ajout des contraintes ...")
        # contraintes sur la génération
        self.model.generation_vre_constraint = pyo.Constraint(self.model.h, self.model.vre, rule=self.generation_vre_constraint_rule)
        self.model.generation_capacity_constraint = pyo.Constraint(self.model.h, self.model.tec, rule=self.generation_capacity_constraint_rule)
        self.model.generation_biogas = pyo.Constraint(rule=self.biogas_constraint_rule)
        
        self.model.generation_river = pyo.Constraint(self.model.h, rule=self.generation_river_rule)
            
        self.model.lake_constraint = pyo.Constraint(self.model.months, rule = self.lake_reserve_constraint_rule)
        self.model.battery_contraint = pyo.Constraint(rule=self.battery_constraint_rule)
        # contraintes sur les frr
        self.model.frr_constraint =  pyo.Constraint(self.model.h, self.model.frr, rule=self.frr_capacity_constraint_rule)
        self.model.reserves_constraint = pyo.Constraint(self.model.h, rule=self.reserves_constraint_rule)

        # contraintes sur STORED
        self.model.storing_constraint = pyo.Constraint(self.model.h,self.model.str, rule=self.storing_constraint_rule)
        self.model.storage_constraint = pyo.Constraint(self.model.str, rule=self.storage_constraint_rule)

        self.model.stored_capacity_constraint = pyo.Constraint(self.model.h, self.model.str, rule=self.stored_capacity_constraint)
        self.model.stored_capacity_constraint2 = pyo.Constraint(self.model.h, self.model.str, rule=self.stored_capacity_constraint2)
        
                

        self.model.adequacy_constraint =  pyo.Constraint(self.model.h, rule=self.adequacy_constraint_rule)
        
        #Creation of the objective 
        self.model.objective = pyo.Objective(rule=self.objective_rule)

        
    def optimisation(self):
        print("Optimisation ...")
        opt = SolverFactory('cbc')
        self.results = opt.solve(self.model)
        
    
    def run(self):
        self.init_set()
        self.init_variable()
        self.add_constraints()
        self.optimisation()
        print("Simulation du modèle faite avec succès ! ")
    
    def cost(self):
        """Return total cost (billion euros) and cost per MWh produced (euros/MWh) """
        
        sumgene = sum(pyo.value(self.model.gene[gen,hour]) for hour in self.model.h for gen in self.model.gen) 
        c_tot = pyo.value(self.model.objective)
        c_mwh_produced = c_tot/sumgene
        res = pd.DataFrame([[c_tot,c_mwh_produced]], columns = ["COST (billion euros)", "Cost per MWh produced (euros/MWh)"])
        return res
    
    
    def cost_by_tec(self,tec):
        const1 = (self.model.Q[tec] - self.capa_ex[tec]) * self.capex[tec] 
        
        if tec in self.stor : 
            const1+=  (self.model.volume[tec]) * self.capex_en[tec] + self.model.S[tec] * (self.s_opex[tec] + self.s_capex[tec])
            
        const1+=  self.model.Q[tec] * self.fOM[tec]
       

        c_tot = sum(self.model.gene[tec, h] * self.vOM[tec] for h in self.model.h)/1000 +const1/1000

        return c_tot
    
        

    def write_results(self, model_name, name_load_demand, name_load_factor):
        print("Ecriture des résultats ..." )

        if not os.path.exists(model_name):
            os.makedirs(model_name)
            
        #enregistrement des données d'entrées du modèle
        # Q  : installed capacity 
        Q_file = model_name + "/" + model_name + "_Q.csv"
        
        Q_index = []
        Q_value = []
        
        for i in self.model.Q:
            Q_index += [i]
            Q_value += [pyo.value(self.model.Q[i])]
        
        data_Q = pd.DataFrame(Q_value, index=Q_index)
        data_Q.to_csv(Q_file)
        
        # S : charging capacity
        S_file = model_name + "/" + model_name + "_S.csv"
        
        S_index = []
        S_value = []
        
        for i in self.model.S:
            S_index += [i]
            S_value += [pyo.value(self.model.S[i])]
        
        data_S = pd.DataFrame(S_value, index=S_index)
        data_S.to_csv(S_file)
        
        # VOLUME : energy capacity
        V_file = model_name + "/" + model_name + "_Volume.csv"
        
        V_index = []
        V_value = []
        
        for i in self.model.volume:
            V_index += [i]
            V_value += [pyo.value(self.model.volume[i])]
        
        data_V = pd.DataFrame(V_value, index=V_index)
        data_V.to_csv(V_file)
        
        # COST
        C_file = model_name + "/" + model_name + "_Cost.csv"
        data_C = pd.DataFrame(self.cost())
        data_C.to_csv(C_file)
        
        # Initialisation DATA
        I_file = model_name + "/" + model_name + "_init_data.txt"
        with open(I_file, 'x') as data_I :
            data_I.write("Demand : " + name_load_demand + "  Production : " + name_load_factor)
        
        #enregistrement des résultats du modèle
        hourly_file = model_name + "/" + model_name + "_hourly_generation.csv"
        
        with open(hourly_file,"w",newline="") as hourly:
            hourly_writer = csv.writer(hourly)

            hourly_header = ["hour"]
            for tec in self.model.tec:
                hourly_header.append(tec)

            for stor in self.model.str: 
                hourly_header.append("Storage " + stor)

            for stor in self.model.str: 
                hourly_header.append("Stored " + stor)

            for rsv in self.model.frr:
                hourly_header.append("reserve " + rsv)
            hourly_header.append("Electricity demand")
            hourly_writer.writerow(hourly_header)


            for hour in self.model.h:
                hourly_data = [hour]

                # Génération
                for tec in self.model.tec:
                    hourly_data.append(round(pyo.value(self.model.gene[tec,hour]),2))

                # Stockage
                for storage_tecs in self.model.str:
                    hourly_data.append(-round(pyo.value(self.model.storage[storage_tecs,hour]),2))

                # Stored
                for storage_tecs in self.model.str:
                    hourly_data.append(round(pyo.value(self.model.stored[storage_tecs,hour]),2))

                # Reserve
                for frr in self.model.frr:
                    hourly_data.append(round(pyo.value(self.model.reserve[frr,hour]),2))

                hourly_data.append(round(self.demand_2050[hour],2))
                hourly_writer.writerow(hourly_data)   
            
        return pd.read_csv(hourly_file) 
    
    
    
#AFFICHAGE


col = {"offshore" : 'steelblue', "onshore" : 'Mediumaquamarine' , "pv" : "#FFE066", "phs" : "silver", "battery" : "slateblue", "biogas" :"#FFD8A8", "methanation": "Lightslategray", "gas": "grey", "lake": "#09F1D3", "river" : "#74C0FC"}
tec = ["offshore","onshore","pv","river","lake","biogas","phs","battery","methanation"]
stor = ["phs","battery","methanation"]


# Dashboard
def show_simu(week,name,opti=True):
    
    if name == "scen2006": 
        d = scen2006
        Volume = Volume_str_opti 
    else :
        if opti:
            d = pd.read_csv("simulations/optimal_simulations/simu_opti_"+name+"/simu_opti_"+name+"_hourly_generation.csv", index_col = 0, squeeze = True)
            Volume = pd.read_csv("simulations/optimal_simulations/simu_opti_"+name+"/simu_opti_"+name+"_Volume.csv", index_col = 0, squeeze = True)
        else:
            d = pd.read_csv("simulations/complete_simulations/simu_"+name+"/simu_"+name+"_hourly_generation.csv", index_col = 0, squeeze = True)
            Volume = pd.read_csv("simulations/complete_simulations/simu_"+name+"/simu_"+name+"_Volume.csv", index_col = 0, squeeze = True)
        
    tec_aux = tec
    if not("river" in d.columns): tec_aux = list(set(tec_aux) - set(["river"]))
    if not("lake" in d.columns): tec_aux = list(set(tec_aux) - set(["lake"]))
    
    h  = 168*(week-1) + np.arange(1,169)
    ymin, ymax = -45,130
    fig2, axs2 = plt.subplots(1, figsize = (15,5))
    
    # Stockage 
    sum_s = 0
    for i in stor: 
        sum_s += d["Storage " + i][h]
    for s in stor[::-1]:
        aux = "Storage " + s
        axs2.fill_between(h, sum_s, color = col[s], label = aux)
        sum_s -= d[aux][h]

    # Production
    sum_g = 0
    for i in tec_aux: 
        sum_g += d[i][h]
    for gene in tec_aux[::-1]: 
        axs2.fill_between(h,sum_g, color = col[gene], label = gene )
        sum_g -= d[gene][h]
    
    # Demande
    axs2.plot(h, d["Electricity demand"][h], color = 'black' , label = "Demand",linewidth= 4)

    axs2.vlines(x=np.linspace(h[0],h[-1],8),ymin = ymin, ymax = ymax,colors="black",linestyle='dotted',linewidth=2)
    axs2.set_ylabel("Energy volume (GWh)")
    axs2.set_ylim(ymin,ymax)
    axs2.legend(loc ="upper right")
    axs2.set_title("Week "+ str(week))
    
    # Affichage stockage
#     h_ratio = np.ones(len(stor))
#     h_ratio[0] = 2 # 1er subplot 2 fois plus grand
#     fig, axs = plt.subplots(len(stor), figsize = (15,15),gridspec_kw={'height_ratios':h_ratio})
        
#     for s in range(0,len(stor)):
#         axs[s].fill_between(h, d["Stored " + stor[s]][h], color = col[stor[s]])
#         axs[s].hlines(y=Volume[s], xmin = h[0], xmax = h[-1], label = "limit", color = 'red')
#         axs[s].set_title("Stored " + str(stor[s]))
#         axs[s].vlines(x=np.linspace(h[0],h[-1],8),ymin = 0, ymax = Volume[s]+10,colors="black",linestyle='dotted',linewidth=2)

